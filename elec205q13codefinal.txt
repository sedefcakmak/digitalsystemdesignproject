----------------------------------------------------------------------------------
-- Company: 
-- Engineer: Sedef Ã‡akmak
-- 
-- Create Date:    11:35:15 01/22/2023 
-- Design Name: 
-- Module Name:    srcq13 - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity srcq13 is
    Port ( A : in  STD_LOGIC_VECTOR (7 downto 0); -- A and B are the inputs and G is output, s0, s1, s2 and g used as signals
           B : in  STD_LOGIC_VECTOR (7 downto 0); --8 bit input
           S2 : in  STD_LOGIC;
           S1 : in  STD_LOGIC;
           S0 : in  STD_LOGIC;
           C : in  STD_LOGIC;
           G : out  STD_LOGIC_VECTOR (7 downto 0));
end srcq13;

architecture Behavioral of srcq13 is
begin
	
 process (A, B, S2, S1, S0, C) --process takes all of them as arguments
	 variable concat : std_logic_vector(3 downto 0); --to create cases concatenate variabloe created, 4 bit variable
	 
 begin
	
	 concat := S2 & S1 & S0 & C; --concat variable have all signals to concatenate
	 
	 case concat is  --within case concat all possible cases and outputs have defined
            when "0000" =>
                    G <= A;
            when "0001" =>
                    G <= std_logic_vector(unsigned(A) + 1);
               
            when "0010" =>
                
                    G <= std_logic_vector(unsigned(A) + unsigned(B));  --as A and B are unsigned unsigned is used within the case for output result
             when "0011" =>
                    G <= std_logic_vector(unsigned(A) + unsigned(B) + 1);
                
            when "0100" =>
                
                    G <= std_logic_vector(unsigned(A) + not unsigned(B));
             when "0101" =>
                    G <= std_logic_vector(unsigned(A) + not unsigned(B) + 1);
                
            when "0110" =>
                
                    G <= std_logic_vector(unsigned(A) - 1);
             when "0111" =>
                    G <= A;
				when "1000" => 
							G <= A and B;
				when "1100" => 
							G <= A and B;
				when "1001" => 
							G <= A or B;
				when "1101" => 
							G <= A or B;
				when "1010" =>
							G <= A xor B;
				when "1110" =>
							G <= A xor B;
				when "1011" => 
							 G <= not A;
				when "1111" => 
							G <= not A;
				 
				 when others =>        --others have defined as X
                G <= (others => 'X');
				
               
		end case;
		
        
        
 end process;
       
end Behavioral;


